-- // Full NPC Auto Walk + Anti Idle + Eye Contact Avoid
-- // By Red & GPT ü¶Ö

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local PathfindingService = game:GetService("PathfindingService")
local VirtualUser = game:GetService("VirtualUser")
local lp = Players.LocalPlayer

local char = lp.Character or lp.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local root = char:WaitForChild("HumanoidRootPart")

-- Settings
local WALK_RADIUS = 60
local WALK_DELAY = 2

-- State
local AUTO_WALK = false
local ANTI_IDLE = false
local AVOID_EYE_CONTACT = false

-- Rayfield UI
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "NPC Controller ü¶Ö",
    LoadingTitle = "NPC Brain Loading...",
    LoadingSubtitle = "by RedGPT",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = "NPC_Save",
       FileName = "npc_config"
    },
    Discord = {
       Enabled = false
    },
    KeySystem = false,
})

local Tab = Window:CreateTab("Main üïπÔ∏è", 4483362458)

-- Functions
local function getRandomPoint()
    local x = root.Position.X + math.random(-WALK_RADIUS, WALK_RADIUS)
    local z = root.Position.Z + math.random(-WALK_RADIUS, WALK_RADIUS)
    local y = root.Position.Y
    return Vector3.new(x,y,z)
end

local function walkTo(point)
    local path = PathfindingService:CreatePath()
    path:ComputeAsync(root.Position, point)
    if path.Status == Enum.PathStatus.Success then
        local waypoints = path:GetWaypoints()
        for _,wp in ipairs(waypoints) do
            humanoid:MoveTo(wp.Position)
            humanoid.MoveToFinished:Wait()
        end
    end
end

local function AvoidEyeContact()
    if not AVOID_EYE_CONTACT then return end
    for _,plr in ipairs(Players:GetPlayers()) do
        if plr ~= lp and plr.Character and plr.Character:FindFirstChild("Head") then
            local head = plr.Character.Head
            local dirToMe = (root.Position - head.Position).Unit
            local dot = head.CFrame.LookVector:Dot(dirToMe)

            if dot > 0.85 then -- ƒë·ªëi ph∆∞∆°ng nh√¨n m√¨nh
                local dist = (root.Position - head.Position).Magnitude
                if dist > 8 then
                    local randomYaw = math.rad(math.random(-120,120))
                    root.CFrame = CFrame.new(root.Position) * CFrame.Angles(0, randomYaw, 0)
                end
            end
        end
    end
end

-- Loops
task.spawn(function()
    while task.wait() do
        if AUTO_WALK then
            local point = getRandomPoint()
            walkTo(point)
            AvoidEyeContact()
            task.wait(WALK_DELAY)
        end
    end
end)

task.spawn(function()
    while task.wait(30) do
        if ANTI_IDLE then
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    end
end)

-- UI Toggles
Tab:CreateToggle({
    Name = "Auto Walk üö∂",
    CurrentValue = false,
    Flag = "AutoWalk",
    Callback = function(Value)
        AUTO_WALK = Value
    end,
})

Tab:CreateToggle({
    Name = "Anti Idle ‚è∞",
    CurrentValue = false,
    Flag = "AntiIdle",
    Callback = function(Value)
        ANTI_IDLE = Value
    end,
})

Tab:CreateToggle({
    Name = "Avoid Eye Contact üëÄ",
    CurrentValue = false,
    Flag = "AvoidEyeContact",
    Callback = function(Value)
        AVOID_EYE_CONTACT = Value
    end,
})

Rayfield:Notify({
    Title = "NPC Script",
    Content = "ü¶Ö Loaded! Use toggles to control NPC brain.",
    Duration = 6.5
})