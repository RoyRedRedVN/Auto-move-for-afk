--// Load Rayfield UI
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not success or not Rayfield then
    warn("Không load được Rayfield UI")
    return
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Config
local Config = {
    Highlight = false,
    Tracer = false,
    Distance = 500,
    Color = Color3.fromRGB(255,0,0),
    AutoJumpSit = true,
    AutoOffOnMove = true,
}

-- ESP storage
local highlights = {}
local tracers = {}

-- Highlight
local function createHighlight(char)
    local h = Instance.new("Highlight")
    h.Adornee = char
    h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    h.FillColor = Config.Color
    h.OutlineColor = Color3.fromRGB(255,255,255)
    h.Parent = char
    return h
end

-- Tracer
local function createTracer()
    local line = Drawing.new("Line")
    line.Thickness = 2
    line.Transparency = 1
    line.Color = Config.Color
    return line
end

-- Main loop
RunService.RenderStepped:Connect(function()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("Humanoid") then
        local humanoid = char:FindFirstChild("Humanoid")

        -- Auto Jump Sit
        if Config.AutoJumpSit and humanoid.Sit then
            humanoid.Jump = true
        end

        -- Auto off khi di chuyển
        if Config.AutoOffOnMove and humanoid.MoveDirection.Magnitude > 0 then
            Config.Highlight = false
            Config.Tracer = false
        end
    end

    for _,player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local root = player.Character.HumanoidRootPart
            local pos, vis = Camera:WorldToViewportPoint(root.Position)
            local dist = (root.Position - Camera.CFrame.Position).Magnitude

            -- Highlight
            if Config.Highlight then
                if not highlights[player] then
                    highlights[player] = createHighlight(player.Character)
                end
                highlights[player].Enabled = dist <= Config.Distance
                highlights[player].FillColor = Config.Color
            elseif highlights[player] then
                highlights[player]:Destroy()
                highlights[player] = nil
            end

            -- Tracer
            if Config.Tracer then
                if not tracers[player] then
                    tracers[player] = createTracer()
                end
                if vis and dist <= Config.Distance then
                    tracers[player].From = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y)
                    tracers[player].To = Vector2.new(pos.X, pos.Y)
                    tracers[player].Visible = true
                    tracers[player].Color = Config.Color
                else
                    tracers[player].Visible = false
                end
            elseif tracers[player] then
                tracers[player].Visible = false
            end
        end
    end
end)

--// Rayfield UI Setup
local Window = Rayfield:CreateWindow({
    Name = "⚡ ESP Menu (Rayfield)",
    LoadingTitle = "Loading ESP...",
    LoadingSubtitle = "By Red",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ESP_Config",
        FileName = "Config"
    }
})

local Tab = Window:CreateTab("ESP", 4483362458)

Tab:CreateToggle({
    Name = "Highlight",
    CurrentValue = false,
    Callback = function(val) Config.Highlight = val end
})

Tab:CreateToggle({
    Name = "Tracer",
    CurrentValue = false,
    Callback = function(val) Config.Tracer = val end
})

Tab:CreateSlider({
    Name = "ESP Distance",
    Range = {50, 1000},
    Increment = 10,
    CurrentValue = 500,
    Callback = function(val) Config.Distance = val end
})

Tab:CreateColorPicker({
    Name = "ESP Color",
    Color = Color3.fromRGB(255,0,0),
    Callback = function(val) Config.Color = val end
})

Tab:CreateToggle({
    Name = "Auto Jump khi Sit",
    CurrentValue = true,
    Callback = function(val) Config.AutoJumpSit = val end
})

Tab:CreateToggle({
    Name = "Tắt ESP khi di chuyển",
    CurrentValue = true,
    Callback = function(val) Config.AutoOffOnMove = val end
})