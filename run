--// Load Rayfield UI \\--
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/main/source.lua'))()

--// Services \\--
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:FindFirstChildOfClass("Humanoid")

--// Variables \\--
local AutoAFKNormal = false
local AutoAFKAntiPlayer = false
local AutoAvoid = false

local avoidDistance = 15
local patrolSegments = 3
local patrolRadius = 20
local backDistance = 10

local savedPositions = {}
local espList = {}
local patrolCounter = 0
local maxPatrolBeforeSave = math.random(3,5)

local targetPlayerName = ""

--// Random Cooldowns \\--
local patrolCooldownMin = 3
local patrolCooldownMax = 8
local avoidCooldownMin = 0.3
local avoidCooldownMax = 1.2
local moveDistanceMin = 5
local moveDistanceMax = 15

--// Rayfield UI \\--
local Window = Rayfield:CreateWindow({Name = "NPC Patrol + MoveTo + Anti Player"})
local MainTab = Window:CreateTab("Main")
local SettingsTab = Window:CreateTab("Settings")

--// Toggles \\--
MainTab:CreateToggle({
    Name = "Anti Idle Normal",
    CurrentValue = false,
    Flag = "AFKNormal",
    Callback = function(state)
        AutoAFKNormal = state
        if state then
            AutoAFKAntiPlayer = false
            AutoAvoid = false
        else
            for _, esp in ipairs(espList) do
                esp.billboard:Destroy()
                esp.part:Destroy()
            end
            savedPositions = {}
            espList = {}
        end
    end
})

MainTab:CreateToggle({
    Name = "Anti Idle Anti Player",
    CurrentValue = false,
    Flag = "AFKAntiPlayer",
    Callback = function(state)
        AutoAFKAntiPlayer = state
        if state then
            AutoAFKNormal = false
            AutoAvoid = false
        else
            for _, esp in ipairs(espList) do
                esp.billboard:Destroy()
                esp.part:Destroy()
            end
            savedPositions = {}
            espList = {}
        end
    end
})

MainTab:CreateToggle({
    Name = "Auto Avoid / Anti Player",
    CurrentValue = false,
    Flag = "AutoAvoid",
    Callback = function(state)
        AutoAvoid = state
        if state then
            AutoAFKNormal = false
            AutoAFKAntiPlayer = false
        end
    end
})

--// Move to Nearest Player button
MainTab:CreateButton({
    Name = "Move to Nearest Player",
    Callback = function()
        local nearest = nil
        local shortest = math.huge
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local dist = (plr.Character.HumanoidRootPart.Position - RootPart.Position).Magnitude
                if dist < shortest then
                    shortest = dist
                    nearest = plr
                end
            end
        end
        if nearest then
            moveToPosition(nearest.Character.HumanoidRootPart.Position)
            LocalPlayer:Chat("Done!")
        end
    end
})

--// Move to Input Name Player
SettingsTab:CreateInput({
    Name = "Tên Player MoveTo",
    PlaceholderText = "Nhập tên player...",
    Text = "",
    Flag = "MoveToName",
    Callback = function(input)
        targetPlayerName = input
    end
})

MainTab:CreateButton({
    Name = "Move to Name Player",
    Callback = function()
        local plr = Players:FindFirstChild(targetPlayerName)
        if plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            moveToPosition(plr.Character.HumanoidRootPart.Position)
            LocalPlayer:Chat("Done!")
            targetPlayerName = ""
        end
    end
})

--// Sliders for Cooldowns & Distance \\--
SettingsTab:CreateSlider({
    Name = "Patrol Cooldown Min",
    Range = {1, 10},
    Increment = 0.5,
    Suffix = "s",
    CurrentValue = patrolCooldownMin,
    Flag = "PatrolCooldownMin",
    Callback = function(value)
        patrolCooldownMin = value
    end
})

SettingsTab:CreateSlider({
    Name = "Patrol Cooldown Max",
    Range = {2, 15},
    Increment = 0.5,
    Suffix = "s",
    CurrentValue = patrolCooldownMax,
    Flag = "PatrolCooldownMax",
    Callback = function(value)
        patrolCooldownMax = value
    end
})

SettingsTab:CreateSlider({
    Name = "AutoAvoid Cooldown Min",
    Range = {0.1, 3},
    Increment = 0.1,
    Suffix = "s",
    CurrentValue = avoidCooldownMin,
    Flag = "AvoidCooldownMin",
    Callback = function(value)
        avoidCooldownMin = value
    end
})

SettingsTab:CreateSlider({
    Name = "AutoAvoid Cooldown Max",
    Range = {0.2, 5},
    Increment = 0.1,
    Suffix = "s",
    CurrentValue = avoidCooldownMax,
    Flag = "AvoidCooldownMax",
    Callback = function(value)
        avoidCooldownMax = value
    end
})

SettingsTab:CreateSlider({
    Name = "Move Distance Min",
    Range = {3, 20},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = moveDistanceMin,
    Flag = "MoveDistanceMin",
    Callback = function(value)
        moveDistanceMin = value
    end
})

SettingsTab:CreateSlider({
    Name = "Move Distance Max",
    Range = {5, 30},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = moveDistanceMax,
    Flag = "MoveDistanceMax",
    Callback = function(value)
        moveDistanceMax = value
    end
})

--// Utils \\--
local function isPlayerNearby(distance)
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            if (plr.Character.HumanoidRootPart.Position - RootPart.Position).Magnitude <= distance then
                return plr
            end
        end
    end
    return nil
end

local function moveAwayFromPlayer(plr)
    if plr and Humanoid then
        local dir = (RootPart.Position - plr.Character.HumanoidRootPart.Position).Unit
        local randomBack = math.random(moveDistanceMin, moveDistanceMax)
        local targetPos = RootPart.Position + dir*randomBack
        moveToPosition(targetPos)
    end
end

function moveToPosition(pos)
    if not Humanoid or not RootPart then return end
    local startTime = tick()
    while (RootPart.Position - pos).Magnitude > 2 do
        Humanoid:MoveTo(pos)
        if Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and math.random() < 0.2 then
            Humanoid.Jump = true
        end
        task.wait(0.1)
        if tick() - startTime > 15 then break end
    end
end

local function getPatrolPositions(origin, segments, radius)
    local positions = {}
    for i = 1, segments do
        local angle = math.random() * math.pi * 2
        local dist = math.random(moveDistanceMin, moveDistanceMax)
        table.insert(positions, origin + Vector3.new(math.cos(angle),0,math.sin(angle))*dist)
    end
    return positions
end

local function createESPText(pos, index)
    local billboard = Instance.new("BillboardGui")
    billboard.Size = UDim2.new(0,150,0,50)
    billboard.Adornee = nil
    billboard.AlwaysOnTop = true
    billboard.Parent = workspace

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,1,0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255,255,0)
    label.TextStrokeTransparency = 0
    label.Font = Enum.Font.GothamBold
    label.TextScaled = true
    label.Text = os.date("Last seen: %H:%M") .. " ("..index..")"
    label.Parent = billboard

    local part = Instance.new("Part")
    part.Anchored = true
    part.CanCollide = false
    part.Transparency = 1
    part.Size = Vector3.new(1,1,1)
    part.Position = pos
    part.Parent = workspace

    billboard.Adornee = part
    return {billboard = billboard, part = part}
end

--// Patrol / AFK Logic \\--
task.spawn(function()
    while true do
        if AutoAFKNormal or AutoAFKAntiPlayer then
            local origin = RootPart.Position
            local patrolPoints = getPatrolPositions(origin, patrolSegments, patrolRadius)

            for _, point in ipairs(patrolPoints) do
                if not (AutoAFKNormal or AutoAFKAntiPlayer) then break end

                if AutoAFKAntiPlayer then
                    local plr = isPlayerNearby(avoidDistance)
                    moveAwayFromPlayer(plr)
                end

                moveToPosition(point)
                local waitTime = math.random()*(patrolCooldownMax - patrolCooldownMin)+patrolCooldownMin
                task.wait(waitTime)

                patrolCounter += 1
                if patrolCounter >= maxPatrolBeforeSave then
                    patrolCounter = 0
                    maxPatrolBeforeSave = math.random(3,5)
                    table.insert(savedPositions, point)
                    table.insert(espList, createESPText(point,#savedPositions))

                    if #savedPositions > 5 then
                        moveToPosition(savedPositions[1])
                        for _, esp in ipairs(espList) do
                            esp.billboard:Destroy()
                            esp.part:Destroy()
                        end
                        savedPositions = {}
                        espList = {}
                    end
                end
            end
        else
            task.wait(0.2)
        end
    end
end)

--// AutoAvoid Loop \\--
RunService.Heartbeat:Connect(function()
    if AutoAvoid then
        local plr = isPlayerNearby(avoidDistance)
        if plr then
            moveAwayFromPlayer(plr)
            local waitTime = math.random()*(avoidCooldownMax - avoidCooldownMin)+avoidCooldownMin
            task.wait(waitTime)
        end
    end
end)

--// Respawn Handler \\--
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    RootPart = char:WaitForChild("HumanoidRootPart")
    Humanoid = char:WaitForChild("Humanoid")
end)