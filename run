--// Load Rayfield UI \\--
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/main/source.lua'))()

--// Services \\--
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:FindFirstChildOfClass("Humanoid")

--// Variables \\--
local autoAvoidEnabled = false
local autoAFK = false
local autoAFKFar = false

local avoidDistance = 15
local backDistance = 10
local patrolRadius = 20
local patrolSegments = 3
local patrolPause = 1
local replyKeywords = {"plss","pls"}
local replyText = "no"

local savedPositions = {}
local patrolCounter = 0
local maxPatrolBeforeSave = math.random(3,5)

--// Create Rayfield UI \\--
local Window = Rayfield:CreateWindow({Name = "NPC Patrol + Né Player"})

local MainTab = Window:CreateTab("Main")
local SettingsTab = Window:CreateTab("Settings")

--// Toggles \\--
MainTab:CreateToggle({
    Name = "Auto Né Player",
    CurrentValue = false,
    Flag = "AutoAvoid",
    Callback = function(state)
        autoAvoidEnabled = state
        if state then
            autoAFK = false
            autoAFKFar = false
        end
    end
})

MainTab:CreateToggle({
    Name = "Auto AFK",
    CurrentValue = false,
    Flag = "AutoAFK",
    Callback = function(state)
        autoAFK = state
        if state then
            autoAFKFar = false
            autoAvoidEnabled = false
        end
    end
})

MainTab:CreateToggle({
    Name = "Auto AFK cách xa Player",
    CurrentValue = false,
    Flag = "AutoAFKFar",
    Callback = function(state)
        autoAFKFar = state
        if state then
            autoAFK = false
            autoAvoidEnabled = false
        end
    end
})

--// Settings sliders \\--
SettingsTab:CreateSlider({
    Name = "Khoảng cách né",
    Range = {5,50},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = avoidDistance,
    Flag = "AvoidDistance",
    Callback = function(value)
        avoidDistance = value
    end
})

SettingsTab:CreateSlider({
    Name = "Độ lùi khi né",
    Range = {5,30},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = backDistance,
    Flag = "BackDistance",
    Callback = function(value)
        backDistance = value
    end
})

SettingsTab:CreateSlider({
    Name = "Bán kính patrol",
    Range = {10,50},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = patrolRadius,
    Flag = "PatrolRadius",
    Callback = function(value)
        patrolRadius = value
    end
})

SettingsTab:CreateInput({
    Name = "Reply Keywords (comma separated)",
    PlaceholderText = "plss,pls,...",
    Text = table.concat(replyKeywords,","),
    Flag = "ReplyKeywords",
    Callback = function(input)
        replyKeywords = {}
        for word in string.gmatch(input, "[^,]+") do
            table.insert(replyKeywords, word:lower())
        end
    end
})

SettingsTab:CreateInput({
    Name = "Reply Text",
    PlaceholderText = "no",
    Text = replyText,
    Flag = "ReplyText",
    Callback = function(input)
        replyText = input
    end
})

--// Utils \\--
local function isPlayerNearby(distance)
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            if (plr.Character.HumanoidRootPart.Position - RootPart.Position).Magnitude <= distance then
                return plr
            end
        end
    end
    return nil
end

local function moveAwayFromPlayer(plr)
    if plr and Humanoid then
        local dir = (RootPart.Position - plr.Character.HumanoidRootPart.Position).Unit
        local targetPos = RootPart.Position + dir*backDistance
        Humanoid:MoveTo(targetPos)
        if Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and math.random() < 0.2 then
            Humanoid.Jump = true
        end
    end
end

local function getPatrolPositions(origin, segments, radius)
    local positions = {}
    for i = 1, segments do
        local angle = math.random() * math.pi * 2
        table.insert(positions, origin + Vector3.new(math.cos(angle),0,math.sin(angle))*radius)
    end
    return positions
end

local function createESPText(pos, index)
    local billboard = Instance.new("BillboardGui")
    billboard.Size = UDim2.new(0,150,0,50)
    billboard.Adornee = nil
    billboard.AlwaysOnTop = true
    billboard.Parent = workspace

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,1,0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255,255,0)
    label.TextStrokeTransparency = 0
    label.Font = Enum.Font.SourceSansBold
    label.TextScaled = true
    label.Text = os.date("Last seen: %H:%M") .. " ("..index..")"
    label.Parent = billboard

    -- Gắn vào vị trí
    local part = Instance.new("Part")
    part.Anchored = true
    part.CanCollide = false
    part.Transparency = 1
    part.Size = Vector3.new(1,1,1)
    part.Position = pos
    part.Parent = workspace

    billboard.Adornee = part

    return {billboard = billboard, part = part}
end

--// Patrol + AFK logic \\--
local espList = {} -- lưu text ESP
spawn(function()
    while true do
        if autoAFK or autoAFKFar or autoAvoidEnabled then
            local origin = RootPart.Position
            local patrolPoints = getPatrolPositions(origin, patrolSegments, patrolRadius)

            for _, point in ipairs(patrolPoints) do
                if not (autoAFK or autoAFKFar or autoAvoidEnabled) then break end

                if Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and math.random() < 0.2 then
                    Humanoid.Jump = true
                end

                if autoAFKFar or autoAvoidEnabled then
                    local plr = isPlayerNearby(avoidDistance)
                    moveAwayFromPlayer(plr)
                end

                Humanoid:MoveTo(point)
                Humanoid.MoveToFinished:Wait()
                task.wait(patrolPause)

                patrolCounter += 1
                if patrolCounter >= maxPatrolBeforeSave then
                    patrolCounter = 0
                    maxPatrolBeforeSave = math.random(3,5)
                    table.insert(savedPositions, point)
                    table.insert(espList, createESPText(point,#savedPositions))

                    -- Reset >5 save
                    if #savedPositions > 5 then
                        Humanoid:MoveTo(savedPositions[1])
                        Humanoid.MoveToFinished:Wait()
                        task.wait(patrolPause)
                        for _, esp in ipairs(espList) do
                            esp.billboard:Destroy()
                            esp.part:Destroy()
                        end
                        savedPositions = {}
                        espList = {}
                    end
                end
            end
        else
            task.wait(0.2)
        end
    end
end)

--// Auto Né player loop \\--
RunService.Heartbeat:Connect(function()
    if autoAvoidEnabled then
        local plr = isPlayerNearby(avoidDistance)
        moveAwayFromPlayer(plr)
    end
end)

--// Auto reply chat \\--
Players.PlayerChatted:Connect(function(plr,msg)
    for _, keyword in ipairs(replyKeywords) do
        if string.find(string.lower(msg), keyword) then
            LocalPlayer:Chat(replyText)
            break
        end
    end
end)

--// Respawn handler \\--
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    RootPart = char:WaitForChild("HumanoidRootPart")
    Humanoid = char:FindFirstChildOfClass("Humanoid")
end)